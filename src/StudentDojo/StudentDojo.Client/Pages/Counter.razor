@page "/counter"

@inherits OwningComponentBase<CounterService>
@implements IAsyncDisposable


<PageTitle>Counter</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Counter</MudText>

<MudText Class="mb-4">Current count: @_counter</MudText>

<MudButton Disabled="@(!_isConnected)" Color="Color.Primary" Variant="Variant.Filled" @onclick="IncrementCounter">Click me</MudButton>

@code {
    public CounterService CounterService => Service;

    [Inject] public ISnackbar Snackbar { get; set; } = default!;

    private int _counter;
    private bool _isConnected;

    protected override async Task OnInitializedAsync()
    {
        CounterService.CounterUpdated += OnCounterUpdated;
        CounterService.ConnectionChanged += OnConnChanged;


        try
        {
            await CounterService.StartAsync();
            _isConnected = true;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to connect to the counter service: {ex.Message}", Severity.Error, configure =>
            {
                configure.VisibleStateDuration = 25000;
            });
        }

        StateHasChanged();
    }

    private void OnCounterUpdated(int newCounter)
    {
        _counter = newCounter;

        Snackbar.Add("Counter was updated!", severity: Severity.Warning);
        InvokeAsync(StateHasChanged);
    }

    private void OnConnChanged(ConnectionEvent e)
    {
        switch (e)
        {
            case ConnectionEvent.Reconnecting:
                _isConnected = false;
                Snackbar.Add("Connection lost. Reconnecting...", Severity.Warning);
                break;
            case ConnectionEvent.Reconnected:
                _isConnected = true;
                Snackbar.Add("Reconnected.", Severity.Success);
                break;
            case ConnectionEvent.Closed:
                _isConnected = false;
                Snackbar.Add("Connection closed.", Severity.Error);
                break;
        }
        InvokeAsync(StateHasChanged);
    }

    private async Task IncrementCounter()
    {
        try
        {
            await CounterService.IncrementCounterAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to increment counter: {ex.Message}", Severity.Error);
        }
    }

    public async ValueTask DisposeAsync()
    {
        CounterService.CounterUpdated -= OnCounterUpdated;
        CounterService.ConnectionChanged -= OnConnChanged;
        await CounterService.DisposeAsync();
    }
}
