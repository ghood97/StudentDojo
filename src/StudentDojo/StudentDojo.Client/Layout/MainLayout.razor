@using System.Security.Claims
@inherits LayoutComponentBase
@implements IDisposable

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@if (!RendererInfo.IsInteractive)
{
    <PrerenderSkeleton />
}
else
{
    <MudLayout>
        <MudAppBar Elevation="1">
            <AuthorizeView>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            </AuthorizeView>
            <MudText Typo="Typo.h5" Class="ml-3">Student Dojo</MudText>
            <MudSpacer />
            <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
            <AuthorizeView>
                @if (!string.IsNullOrEmpty(_initials) && string.IsNullOrEmpty(_pictureUrl))
                {
                    <MudAvatar Color="Color.Primary" Size="Size.Medium">@_initials</MudAvatar>
                }
                else if (!string.IsNullOrEmpty(_pictureUrl))
                {
                    <MudAvatar Size="Size.Medium">
                        <MudImage Src="@_pictureUrl"></MudImage>
                    </MudAvatar>
                }
                else
                {
                    <MudAvatar Color="Color.Primary" Size="Size.Medium">?</MudAvatar>
                }
                <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit">
                    <MudMenuItem OnClick="@Logout">Logout</MudMenuItem>
                </MudMenu>
            </AuthorizeView>
        </MudAppBar>
        <AuthorizeView>
            <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
                <NavMenu />
            </MudDrawer>
        </AuthorizeView>
        <MudMainContent>
            @Body
        </MudMainContent>
    </MudLayout>
}

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    [Inject] public AuthenticationStateProvider AuthProvider { get; set; } = default!;
    [Inject] public IServiceProvider Services { get; set; } = default!;
    public INavService Nav { get; set; } = default!;

    private bool _drawerOpen = false;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;
    private bool _isAuthenticated;
    private string? _pictureUrl;
    private string? _initials;

    protected override void OnInitialized()
    {
        if (RendererInfo.IsInteractive && Nav is null)
        {
            Nav = Services.GetRequiredService<INavService>();
            // safe to use _nav from here on (only in interactive branch)
        }
        OnAuthChangedAsync(AuthProvider.GetAuthenticationStateAsync());
        AuthProvider.AuthenticationStateChanged += OnAuthChangedAsync;

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private void Logout()
    {
        Nav.NavigateTo("auth/logout", redirectUri: "/", forceLoad: true);
    }

    private async void OnAuthChangedAsync(Task<AuthenticationState> stateTask)
    {
        AuthenticationState authState = await stateTask;
        _isAuthenticated = authState.User.Identity?.IsAuthenticated == true;

        if (_isAuthenticated)
        {
            ClaimsPrincipal user = authState.User;
            _pictureUrl = user.FindFirst("picture")?.Value;

            if (string.IsNullOrEmpty(_pictureUrl))
            {
                string name = user.Identity?.Name ?? "";
                _initials = string.Join("", name.Split(' ', StringSplitOptions.RemoveEmptyEntries)
                                .Select(n => n[0]))
                                .ToUpperInvariant();
            }
        }
    }

    public void Dispose()
    {
        AuthProvider.AuthenticationStateChanged -= OnAuthChangedAsync;
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

  
}


